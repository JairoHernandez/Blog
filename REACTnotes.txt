------What React Router Does------

Blog$ npm install --save react-router-dom@4.0.0

Refer to Diagram.
    History is already running behind the scenes when you install react-router-dom@4.0.0. 
    This installs a History library.
    The whole diagram represents SPAs.

------The Basics of React Router------

BrowserRouter handles the history.

src/index.js
    import { BrowserRouter, Route } from 'react-router-dom';

------Our First Route Definitionr------

Because we are using react-router we no longer have a central single component going on so we have no need for components/app.js and it can be deleted.
    sr/components/app.js
        import App from './components/app'; // DELETE THIS ILNE AND IT'S components/app.js file!


------State as an Object------
The current route a user is looking at is really just another piece of state inside our application.

We dont need that 'activePost' piece of state in the state since we simply pull it's ID out of the posts array.
Since ths URL already reflects the post ID --> /posts/5 
Then store POSTs inside an object and not an array as we have in the past.

------Back to Redux - Index action------
~/REACTmodern/Blog$ npm install --save axios redux-promise

    src/index.js (add promise)
        const createStoreWithMiddleware = applyMiddleware(promise)(createStore);

------Implementing Posts Reducer------
stephengrider.github.io/JSPlaygrounds/

------Action Creator Shortcuts------

components/posts_index.js
    // Shortcut to avoid use of mapDispatchToProps is by just passing in {fetchPosts}
    // If you require say a computation then you can then bring back use of mapDispatchToProps.
    export default connect(null, { fetchPosts })(PostIndex);

From the Chrome dev tool Network Tab select XHR to see ajax requests.

------Rendernig a List of Posts------
Beause ajax request to get data from API is asynchronous all componentDidMount cares about is when
the DOM has loaded. IT doesnt care if the data is back and promised/resolved. This is why you first
get an empty object back. Once the ajax async requests completes and resolves promise action Creator
is then called again and this is when the object populates with data.

src/components/posts_index.js
    // Executes right after component is loaded in the DOM.
        componentDidMount() {
            this.props.fetchPosts();
        }

------React Router Gotcha------
Why are we seeing all components on the the screen and not justs /posts/new?
It's loading the root page because /posts/new also contains that first slash /.
React router does a "loose" match.

Solution is to use Switch. Most speficic match should be at the top of component Switch list.

index.js
    import { BrowserRouter, Route, switch } from 'react-router-dom';

    <Switch>
          <Route path="/posts/new" component={PostsNew} />
          <Route path="/" component={PostsIndex} />
    </Switch>

------Navigation with the Link Component------

Have React fetch link as a component and  not traditional HTML <a> tag links because that will 
fetch a full document from server.

components/posts_index.js
    <Link className="btn btn-primary" to="/posts/new">
        Add a Post
    </Link>

------Redux Form------

redux-form.com is awesome it shows you how to do validation and React widgets so check it out.
From the site follow the steps to install it.

The form produces state that is being rendered on the screen so you need to use reducer.
At end of the day redux-form is saving us time from having to write a buch of action creators.
It's still fine to write them if you want too though.

reducers/index.js
    // Redux-form recommends using alias since term 'reducer' is too causual
    import { reducer as formReducer} from 'redux-form'; 