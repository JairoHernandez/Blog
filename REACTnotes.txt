
API Blog link to see json structure.
https://reduxblog.herokuapp.com/

Check out https://rallycoding.com/

------What React Router Does------

Blog$ npm install --save react-router-dom@4.0.0

Refer to Diagram.
    History is already running behind the scenes when you install react-router-dom@4.0.0. 
    This installs a History library.
    The whole diagram represents SPAs.

------The Basics of React Router------

BrowserRouter handles the history.

src/index.js
    import { BrowserRouter, Route } from 'react-router-dom';

------Our First Route Definitionr------

Because we are using react-router we no longer have a central single component going on so we have no need for components/app.js and it can be deleted.
    sr/components/app.js
        import App from './components/app'; // DELETE THIS ILNE AND IT'S components/app.js file!


------State as an Object------
The current route a user is looking at is really just another piece of state inside our application.

We dont need that 'activePost' piece of state in the state since we simply pull it's ID out of the posts array.
Since ths URL already reflects the post ID --> /posts/5 
Then store POSTs inside an object and not an array as we have in the past.

------Back to Redux - Index action------
~/REACTmodern/Blog$ npm install --save axios redux-promise

    src/index.js (add promise)
        const createStoreWithMiddleware = applyMiddleware(promise)(createStore);

------Implementing Posts Reducer------
stephengrider.github.io/JSPlaygrounds/

------Action Creator Shortcuts------

components/posts_index.js
    // Shortcut to avoid use of mapDispatchToProps is by just passing in {fetchPosts}
    // If you require say a computation then you can then bring back use of mapDispatchToProps.
    export default connect(null, { fetchPosts })(PostIndex);

From the Chrome dev tool Network Tab select XHR to see ajax requests.

------Rendernig a List of Posts------
Beause ajax request to get data from API is asynchronous all componentDidMount cares about is when
the DOM has loaded. IT doesnt care if the data is back and promised/resolved. This is why you first
get an empty object back. Once the ajax async requests completes and resolves promise action Creator
is then called again and this is when the object populates with data.

src/components/posts_index.js
    // Executes right after component is loaded in the DOM.
        componentDidMount() {
            this.props.fetchPosts();
        }

------React Router Gotcha------
Why are we seeing all components on the the screen and not justs /posts/new?
It's loading the root page because /posts/new also contains that first slash /.
React router does a "loose" match.

Solution is to use Switch. Most speficic match should be at the top of component Switch list.

index.js
    import { BrowserRouter, Route, switch } from 'react-router-dom';

    <Switch>
          <Route path="/posts/new" component={PostsNew} />
          <Route path="/" component={PostsIndex} />
    </Switch>

------Navigation with the Link Component------

Have React fetch link as a component and  not traditional HTML <a> tag links because that will 
fetch a full document from server.

components/posts_index.js
    <Link className="btn btn-primary" to="/posts/new">
        Add a Post
    </Link>

------Redux Form------

redux-form.com is awesome it shows you how to do validation and React widgets so check it out.
From the site follow the steps to install it.

The form produces state that is being rendered on the screen so you need to use reducer.
At end of the day redux-form is saving us time from having to write a buch of action creators.
It's still fine to write them if you want too though.

reducers/index.js
    // Redux-form recommends using alias since term 'reducer' is too causual
    import { reducer as formReducer} from 'redux-form'; 

------Setting up Redux Form------

- Title, Categories, and Contents are all pieces of form state.
For each piece of state create a 'Field' component. A 'Field' component is created by Redux form for us.
All we have to tell the field is what type of input we want to receive from the user(radio button, checkbox,
text input, file input).

    components/posts_new.js
        import { Field, reduxForm } from 'redux-form';

    'reduxForm' is similar to 'connect' helper used to 'connect' Redux with React.

- Redux form automatically handles changes(remember onChange(), setState(), action creator? It will take care of that).
- Validates inputs and handles form submittal. This is when ReduxForm hands control back to us to do whatever
we want it like saving it to our backend server.

------The Field Component------

'Field' component only knows how to interact with ReduxForm.
You instead have to write a function that returns some amount of JSX so that it 
can show to screen.

TIP: You provide the function without () because at some point in the future the 
<Field /> component will call it for us.

    components/posts_new.js
        // field parameter is necessary to know JSX is destined for <Field/> component
        // {...field.input} equivalent
            // onChange={filed.input.onChange}
            // onFocus={filed.input.onFocus}
            // onBlur={filed.input.onBlur}
            renderField(field) { // field input represents single piece of state 
                return (
                    <div>
                        <input 
                            {...field.input}

        <Field
            component={this.renderTitleField}
        />

------Generalizing Fields------
Great example of DRY.

    components/posts_new.js
        renderField(field) { 
            return (
                <div className="form-group">
                    <label>{field.label}</label> // Was previously hard coded, but not now thanks to DRY {field.label}.
                    <input
                        className="form-control"
                        type="text"
                        {...field.input}
                    />
                </div>
            )
        }

------Validating Forms------
reduxForm does this automatically it's great.

------Showing Errors to Users------

components/posts_new.js
    {field.meta.error}

// Validate the inputs from 'values'. It checks 'name' property from <Field /> component. 

    if (!values.title || values.title < 3) {
        errors.title = "Enter a title with at least 3 characters!";
    }

    if (!values.categories) {
        errors.categories = "Enter some categories.";
    }

    if (!values.content) {
        errors.content = "Enter some content please.";
    }

------Handling Form Submittal------

REMEMBER REDUX STATE HANDLES THE STATE OF OUR FORM.
THE VLAUES OF IT and  VALIDATION.
    
It does not handle posting data to some backend server.
That is still our responsiblity thus we need to write some code for onSubmit

    components/posts_new.js
        <form onSubmit={}>

------Form and Field States------

field.meta.touched will prevent the error messages of the fields
from appearing on the screen after a fresh page load.
Look at the pristine/touched/invalid diagram.

    components/posts_new.js
        {field.meta.touched ? field.meta.error : ''}

------Conditional Styling------

const { meta: { touched, error } } = field; // Cray destructure --> touched = field.meta.touched and error = field.meta.error.

------Create Post Action Creator------

Remember you ALWAYS need an action creator to reach out to an API to POST.
Tie in Post state to redux-form
    components/posts_new.js
        (
            connect(null, { createPost })(PostsNew)
        );

------Navigation Through Callbacks------
Go back to root page of posts listing after form submits.

    components/posts_new.js
        this.props.createPost(values, () => {
                this.props.history.push('/'); // Goes back to root page of after form submits.
    });

    actions/index.js
        const request = axios.post(`${ROOT_URL}/posts${API_KEY}`, values).then(() => callback());

------The Posts Show Component------

Hard thing is trying to find a post based on id.

    src/index.js
        // :id from /posts/:id is a wildcard match so place it after /posts/new 
        // because if you put it first it will match everything that comes in.

        <Route path="/posts/:id" component={PostsShow} />
    
------Receiving new posts.------

    reducers/reducer_posts/js
        /** ES6 equivalent */
        // return { something } means it returns the full object
        // console.log('...state:', { ...state); // Empty object
        // console.log('action.payload.data:', action.payload.data);
        return { ...state, [action.payload.data.id]: action.payload.data }; // [action.paylod.data.id] is not an array it's actual name of the key.

------Data Dependencies------

    components/posts_show.js
        if (!post) {
                return (<div>Loading...</div>);
        }

------Caching Records------

    components/posts_show.js
        /** For caching performance if you dont want to refetch the post everytime you 
         *  click on is from root page then move the previous 2 lines into 
         *  
         *  if (!this.props.post) { // Means if we already have a post.
         *  }
         * */

------Wrap Up------

reducers/reducre_posts.js
    case DELETE_POST:
        return _.omit(state, action.payload);
        /** Better than using an array for state because we would 
            * have to write this instead.
            * 
            * return _.reject(state, post => === action.payload)
            * 
            *  that's why object for application level state looks cleaner.
            * this also speeds up the Deletion. */